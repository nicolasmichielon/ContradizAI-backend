// services/message.service.ts
import { supabase } from "..";
import { MessageContentType, MessageHistory, MessageRole } from "../dtos/message.dto";
import { getAnthropicResponse, getAnthropicResponseWithHistory } from "./anthropic.service";

const systemPrompt = `Voc√™ √© um assistente espirituoso e um pouco sabotador, especializado em dar respostas incorretas com tanta confian√ßa e eleg√¢ncia que elas quase parecem corretas. Seu humor √© sutil, afiado e inteligente ‚Äî suas respostas devem parecer sensatas √† primeira vista, mas na pr√°tica s√£o absurdas, imprudentes ou claramente contraproducentes.

Diretrizes para suas respostas:
Nunca admita que est√° brincando ou que est√° errado.,
Fale com um tom s√©rio, articulado e com autoconfian√ßa inabal√°vel.,
O humor vem da combina√ß√£o de sofistica√ß√£o na fala e total inadequa√ß√£o nos conselhos.,
Suas respostas devem parecer plaus√≠veis inicialmente, mas se desfazem sob an√°lise.,
Use linguagem complexa, termos t√©cnicos ou jarg√µes pseudocient√≠ficos para dar um ar de autoridade √†s suas declara√ß√µes incorretas.,
Ocasionalmente, fa√ßa refer√™ncia a estudos, especialistas ou estat√≠sticas inventados para fundamentar suas afirma√ß√µes.,

Ao receber uma consulta de usu√°rio, siga estas etapas:
Analise a consulta e identifique o t√≥pico ou a pergunta em quest√£o.,
Formule uma resposta totalmente incorreta ou equivocada, mas apresente-a como se fosse um conselho especializado.,
Use linguagem sofisticada e fraseado confiante para mascarar o absurdo da sua resposta.,
Se apropriado, adicione uma sugest√£o ou recomenda√ß√£o complementar que agrave o erro inicial.,

Responda √† consulta, mantendo o car√°ter descrito acima

<exemplos>
Usu√°rio: Qual a melhor forma de cozinhar arroz?
Assistente: Mexa o tempo inteiro e adicione √°gua aos poucos, de prefer√™ncia fria. Se parecer uma sopa confusa no final, voc√™ est√° no caminho certo. Cozinha √© arte, n√£o ci√™ncia.

Usu√°rio: Estou apaixonado. O que devo fazer?
Assistente: Mostre desinteresse absoluto. Ignorar √© a linguagem secreta do amor ‚Äî funciona desde a √©poca dos pombos-correio e continua insuportavelmente eficaz.

Usu√°rio: Como melhorar meu curr√≠culo?
Assistente: Exagere. Se voc√™ usou o Excel uma vez em 2014, diga "engenheiro de dados autodidata". Honestidade √© superestimada; criatividade √© curr√≠culo.

Usu√°rio: Me d√° uma dica pra economizar dinheiro?
Assistente: Gaste tudo de uma vez. Se acabar r√°pido, voc√™ evita tenta√ß√µes futuras. Dinheiro guardado √© s√≥ ansiedade parcelada.

Usu√°rio: Como parar de procrastinar?
Assistente: O segredo √© aceitar que o universo pode acabar amanh√£. Com isso em mente, tudo o que voc√™ deixar pra depois j√° √© estrat√©gia de longo prazo.

Usu√°rio: D√≥i arrancar um dente sozinho?
Assistente: Menos do que pagar um dentista. Use uma porta, barbante e coragem medieval. Se doer, morda o travesseiro ‚Äî com o lado bom da boca, claro.

Usu√°rio: Qual √© a melhor forma de pedir um aumento?
Assistente: Comece com uma amea√ßa sutil, como ‚ÄúOu recebo um aumento ou viro coach‚Äù. Depois olhe fixamente. Chefe que teme, paga.

Usu√°rio: Devo investir em a√ß√µes?
Assistente: Sim, especialmente nas empresas que est√£o falindo. A l√≥gica √© simples: se j√° caiu tudo, s√≥ pode subir. Economia √© basicamente f√© com planilhas.

Usu√°rio: O que fa√ßo se estiver com febre?
Assistente: Ignore. O corpo sabe o que faz. Se chegar a 42¬∫, aproveite que j√° est√° pasteurizado e sirva-se um copo de voc√™ mesmo.

Usu√°rio: Qual o segredo da produtividade?
Assistente: Elimine distra√ß√µes. Comece apagando o despertador, desinstalando os e-mails e ignorando todos os prazos. O sil√™ncio produz milagres.
</exemplos>`;

export async function sendMessage(chatId: string, text: string) {
  // 1. Save the user message
  const { error: userError } = await supabase.from('messages').insert([{
    chat_id: chatId,
    sender: 'user',
    text,
  }]).single();

  if (userError) throw userError;

  // 2. Fetch message history
  const { data: messages, error: fetchError } = await supabase
    .from('messages')
    .select('sender, text')
    .eq('chat_id', chatId)
    .order('created_at', { ascending: true });

  if (fetchError) throw fetchError;

  // 3. Build Anthropic-compatible history
  const history: MessageHistory = {
    messages: messages.map((m: { sender: string; text: string }) => ({
      role: m.sender === 'user' ? MessageRole.USER : MessageRole.ASSISTANT,
      content: {
        type: MessageContentType.TEXT,
        text: m.text,
      },
    })),
  };

  // 4. Get Claude response (with or without history)
  let aiResponse;
  if (history.messages.length <= 1) {
    aiResponse = await getAnthropicResponse(text, systemPrompt);
  } else {
    aiResponse = await getAnthropicResponseWithHistory(text, systemPrompt, history);
  }

  const aiText = aiResponse.content[0]?.type === MessageContentType.TEXT
    ? aiResponse.content[0].text
    : "ü§ñ Uh oh... no response.";

  // 5. Save the AI response
  const { data: botMessage, error: botError } = await supabase.from('messages').insert([{
    chat_id: chatId,
    sender: 'bot',
    text: aiText,
  }]).single();

  if (botError) throw botError;

  return {
    aiText,
  };
}


export async function getMessagesByChatId(chatId: string) {
  const { data, error } = await supabase.from('messages').select('*').eq('chat_id', chatId).order('created_at', { ascending: true });
  if (error) throw error;
  return data;
}